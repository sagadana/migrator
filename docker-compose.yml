services:
  # ---------------------
  # Test
  # ---------------------
  tester-state:
    build:
      context: .
    volumes:
      - .:/usr/src/app
    command:
      go test -v -cover -coverprofile=/usr/src/app/tests/test-states-coverage.out -coverpkg
      "github.com/sagadana/migrator/states" /usr/src/app/tests/states_test.go
    networks:
      - dev-network
    env_file:
      - ./tests/.env.dev
    depends_on:
      redis:
        condition: service_healthy

  tester-ds:
    build:
      context: .
    volumes:
      - .:/usr/src/app
    command:
      go test -v -cover -coverprofile=/usr/src/app/tests/test-datasources-coverage.out -coverpkg
      "github.com/sagadana/migrator/datasources" /usr/src/app/tests/datasources_test.go
    networks:
      - dev-network
    env_file:
      - ./tests/.env.dev
    depends_on:
      redis:
        condition: service_healthy
      mongo-a:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy

  tester-pipe:
    build:
      context: .
    volumes:
      - .:/usr/src/app
    command:
      go test -v -cover -coverprofile=/usr/src/app/tests/test-pipelines-coverage.out -coverpkg
      "github.com/sagadana/migrator/pipelines" /usr/src/app/tests/pipelines_test.go
    networks:
      - dev-network
    env_file:
      - ./tests/.env.dev
    depends_on:
      redis:
        condition: service_healthy
      mongo-a:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy

  tester-helper:
    build:
      context: .
    volumes:
      - .:/usr/src/app
    command:
      go test -v -cover -coverprofile=/usr/src/app/tests/test-helpers-coverage.out -coverpkg
      "github.com/sagadana/migrator/helpers" /usr/src/app/tests/helpers_test.go
    networks:
      - dev-network
    env_file:
      - ./tests/.env.dev

  lint:
    image: golangci/golangci-lint:latest
    volumes:
      - .:/app
    working_dir: /app
    command: golangci-lint run
    networks:
      - dev-network
    env_file:
      - ./tests/.env.dev

  # ---------------------
  # Redis
  # ---------------------

  redis:
    image: 'redis:latest'
    restart: always
    expose:
      - 6379
    ports:
      - 6379:6379
    environment:
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=''
    networks:
      - dev-network
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      retries: 3

  # -----------------------------------
  # MongoDB (replica set)
  # -----------------------------------

  # MongoDb Primary Replica
  mongo-a:
    image: 'mongo:latest'
    restart: always
    expose:
      - 27017
    ports:
      - ${MONGO_PORT}:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS}
      - MONGO_INITDB_DATABASE=${MONGO_DB}
      - MONGO_REPLICA_SET_NAME=${MONGO_RS}
    networks:
      - dev-network
    volumes:
      - ./tests/mongo/replica.key:/data/replica.key
    healthcheck:
      test: >
        mongosh --host localhost --quiet --eval  "try { rs.status().ok } catch (e) { 0 }"
      interval: 10s
      timeout: 5s
      retries: 3
    entrypoint:
      - bash
      - -c
      - |
        chmod 400 /data/replica.key
        chown 999 /data/replica.key
        exec docker-entrypoint.sh $$@
    command: mongod --bind_ip_all --replSet ${MONGO_RS} --keyFile /data/replica.key
  mongo-b:
    image: 'mongo:latest'
    restart: always
    expose:
      - 27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS}
      - MONGO_INITDB_DATABASE=${MONGO_DB}
      - MONGO_REPLICA_SET_NAME=${MONGO_RS}
    networks:
      - dev-network
    volumes:
      - ./tests/mongo/replica.key:/data/replica.key
    healthcheck:
      test: >
        mongosh --host localhost --quiet --eval  "try { rs.status().ok } catch (e) { 0 }"
      interval: 10s
      timeout: 5s
      retries: 3
    entrypoint:
      - bash
      - -c
      - |
        chmod 400 /data/replica.key
        chown 999 /data/replica.key
        exec docker-entrypoint.sh $$@
    command: mongod --bind_ip_all --replSet ${MONGO_RS} --keyFile /data/replica.key
  # MongoDb Replica-Set Initializer
  mongo-init:
    image: 'mongo:latest'
    restart: 'no'
    depends_on:
      - mongo-a
      - mongo-b
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS}
      - MONGO_HOST_1=${MONGO_PRIMARY_HOST}
      - MONGO_HOST_2=${MONGO_REPLICA_1}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_RS=${MONGO_RS}
    volumes:
      - ./tests/mongo/replica-init.sh:/scripts/replica-init.sh
    networks:
      - dev-network
    entrypoint:
      - bash
      - -c
      - |
        cat /scripts/replica-init.sh > /usr/bin/replica-init.sh
        sed -i 's/\r$//' /usr/bin/replica-init.sh # remove windows carriage-returns
        chmod +x /usr/bin/replica-init.sh
        exec /usr/bin/replica-init.sh $$@

  # ---------------------
  # PostgreSQL
  # ---------------------
  postgres:
    image: 'postgres:latest'
    restart: always
    expose:
      - 5432
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASS}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./tests/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - dev-network
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost -p 5432
      interval: 10s
      timeout: 5s
      retries: 5
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # ---------------------
  # MySQL
  # ---------------------
  mysql:
    image: 'mysql:9.4'
    restart: always
    expose:
      - 3306
    ports:
      - ${MYSQL_PORT}:3306
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASS}
      - MYSQL_DATABASE=${MYSQL_DB}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASS}
    volumes:
      - ./tests/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - dev-network
    healthcheck:
      test: mysqladmin ping -h localhost -u${MYSQL_USER} -p${MYSQL_PASS}
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      # --binlog-format=ROW
      # --default-authentication-plugin=mysql_native_password
      --server-id=1 --log-bin=mysql-bin --binlog-do-db=${MYSQL_DB} --gtid-mode=ON --enforce-gtid-consistency=ON
      --log-replica-updates=ON

networks:
  dev-network:
    driver: bridge
